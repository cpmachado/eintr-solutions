#+title: eintr-solutions
#+author: cpmachado
#+startup: overview


My solutions of the exercises of "An Introduction to Programming in Emacs Lisp"(eintr).


* 1. List Processing
** 1.11 Error Message Exercises
*** Exercise 1.11.1
Generate an error message by evaluating an appropriate symbol that is not within parentheses.
#+begin_src emacs-lisp :tangle ch1/ex1.el
  ;; Exercise 1.11.1: Generate an error message by evaluating an appropriate symbol that is not within parentheses.
  message
#+end_src
*** Exercise 1.11.2
Generate an error message by evaluating an appropriate symbol that is between parentheses.
#+begin_src emacs-lisp :tangle ch1/ex2.el
  ;; Exercise 1.11.2: Generate an error message by evaluating an appropriate symbol that is between parentheses.
  (fill-column)
#+end_src
*** Exercise 1.11.3
Create a counter that increments by two rather than one.
#+begin_src emacs-lisp :tangle ch1/ex3.el
  ;; Exercise 1.11.3: Create a counter that increments by two rather than one.
  (setq counter 0)                ; Let’s call this the initializer.
  (setq counter (+ counter 1))    ; This is the incrementer.
  counter                         ; This is the counter.
#+end_src
*** Exercise 1.11.4
Write an expression that prints a message in the echo area when evaluated.
#+begin_src emacs-lisp :tangle ch1/ex4.el
  ;; Exercise 1.11.4: Write an expression that prints a message in the echo area when evaluated.
  (message "Hello World")
#+end_src

* 2. Practicing Evaluation
** 2.5 Evaluation Exercise
Find a file with which you are working and move towards its middle.
Find its buffer name, file name, length, and your position in the file.
#+begin_src emacs-lisp :tangle ch2/ex.el
  ;; Find a file with which you are working and move towards its middle.
  ;; Find its buffer name, file name, length, and your position in the file.

  ;; this should all be encapsulated in a function TODO

  ;; Move to center of file
  ;; to the beginning
  (forward-char (- (point)))
  ;; to the middle
  (forward-char (/ (buffer-size) 2))

  ;; buffer name
  (message (buffer-name))
  ;; file name
  (message (buffer-file-name))
  ;; length
  (message (buffer-size))

  ;; position, should me middle of the buffer
  (message (point))
#+end_src

* 3. Writing Defuns
** 3.12 defun Exercises
Write a non-interactive function that doubles the value of its
argument, a number.  Make that function interactive.

#+begin_src emacs-lisp :tangle ch3/ex.el
  (defun double-value (number)
    "Double the value"
    (* 2 number))
#+end_src

Write a function that tests whether the current value of
‘fill-column’ is greater than the argument passed to the function,
and if so, prints an appropriate message.

#+begin_src emacs-lisp :tangle ch3/ex.el
  (defun check-fill-column (number)
    "Check if fill-column is bigger than parameter"
    (interactive "p")
    (if (> fill-column number)
	(message "fill-column: %d  is greater than %d" fill-column number)))        
#+end_src

* TODO 4. Buffer Walk Through
** Buffer Exercises
* TODO 5. More Complex
** optional Exercise
* TODO 6. Narrowing & Widening
** narrow Exercise
* TODO 7. car cdr & cons
** TODO cons Exercise
* TODO 8. Cutting & Storing Text
** search Exercises
* TODO 9. List Implementation
** List Exercise
